from __future__ import absolute_import
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from config import BOT_TOKEN, ADMIN_IDS, BOT_DB_PATH, PRIVATE_CHANNEL_ID, CHANNEL_INVITE_LINK, QUESTIONS_DB_PATH, ANOTHER_BANKING_ID, QIWI_PAYMENT_URL_COURSE, QIWI_PAYMENT_URL_1QUEST, QIWI_PAYMENT_URL_10QUESTS, MY_LOGIN, QIWI_SECRET_KEY, PAYMENTS_DB_PATH
from keyboards import keyboard, course_keyboard, countbju_keyboard, training_keyboard
import sqlite3
from db.db import BotDb, QuestionsDb, PaymentsDb
from telebot import types
from admin.admin_keyboards import admin_keyboard
import datetime
import random
import string
from threading import local
import requests
from telebot import types
from SimpleQIWI import *
import threading
import time

bot = telebot.TeleBot(BOT_TOKEN)
bot_db = BotDb(BOT_DB_PATH) 
private_channel_id = PRIVATE_CHANNEL_ID
channel_invite_link = CHANNEL_INVITE_LINK

user_states = {}
thread_locals = local()
questions_db = sqlite3.connect(QUESTIONS_DB_PATH, check_same_thread=False)
payments_db = PaymentsDb(PAYMENTS_DB_PATH)
api_access_token = QIWI_SECRET_KEY
my_login = MY_LOGIN


def payment_history_last(my_login, api_access_token, rows_num, next_TxnId, next_TxnDate):
    s = requests.Session()
    s.headers['authorization'] = 'Bearer ' + api_access_token
    parameters = {'rows': rows_num, 'nextTxnId': next_TxnId, 'nextTxnDate': next_TxnDate}
    h = s.get('https://edge.qiwi.com/payment-history/v2/persons/' + my_login + '/payments', params=parameters)
    return h.json()

lastPayments = payment_history_last(my_login, api_access_token, '30','','')

def update_payments():
    while True:
        try:
            last_payments = payment_history_last(my_login, api_access_token, '30', '', '')

            for payment in last_payments['data']:
                txn_id = payment['txnId']
                amount = payment['sum']['amount']
                currency = payment['sum']['currency']
                date = payment['date']
                comment = payment.get('comment', '')
                status = payment['status']

                if not payments_db.payment_exists(txn_id):
                    payments_db.insert_payment(txn_id, amount, currency, date, comment, status)

            time.sleep(15)

        except Exception as e:
            print(f"Error updating payments: {e}")
            time.sleep(15)
            
threading.Thread(target=update_payments).start()
            
            

questions_cursor = questions_db.cursor()
questions_cursor.execute('''
    CREATE TABLE IF NOT EXISTS questions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        username TEXT,
        question_text TEXT,
        answers_text TEXT,
        timestamp NUMERIC,
        question_count INTEGER DEFAULT 1,
        admin_username TEXT
    )''')

questions_db.commit()




@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    if(not bot_db.user_exist(message.from_user.id)):
        bot_db.add_user(message.from_user.id, message.from_user.username)

    if message.from_user.username:
        username = message.from_user.username
    elif message.from_user.first_name:
        username = message.from_user.first_name
    else:
        username = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {username}!", reply_markup=keyboard)
 
 
###   
@bot.message_handler(func=lambda message: message.text == 'üôé‚Äç‚ôÇÔ∏è –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
def my_profile_handler(message):
    user_id = message.from_user.id
    user_data = bot_db.get_user_data(user_id)

    if user_data:
        username = user_data['username']
        join_date = user_data['join_date']
        has_course_access = user_data['has_course_access']

        course_access_message = "–î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É: ‚úÖ" if has_course_access else "–î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É: ‚ùå"

        profile_info = f"<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {username}\n" \
                      f"<b>–î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</b> {join_date}\n" \
                      f"{course_access_message}"

        bot.send_message(message.chat.id, profile_info, parse_mode='HTML')
    else:
        bot.send_message(message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
 
 
###  
@bot.message_handler(func=lambda message: message.text == 'üìò –ö—É—Ä—Å –æ –Ω–∞–±–æ—Ä–µ –∏ —Å—É—à–∫–µ —Ç–µ–ª–∞')
def course_handler(message):
    user_id = message.from_user.id

    if bot_db.user_has_course_access(user_id):
        bot.send_message(user_id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É.", reply_markup=course_keyboard)
    else:
        markup = types.InlineKeyboardMarkup()


        buy_1question_button = types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å –∫—É—Ä—Å (QIWI –ö–æ—à–µ–ª–µ–∫)", callback_data="buy_course")
        promocode_course_button = types.InlineKeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data='use_promocode_for_course')
        another_banking_course_button = types.InlineKeyboardButton("–î—Ä—É–≥–æ–π –±–∞–Ω–∫–∏–Ω–≥", callback_data='another_banking_for_course')

        buttons = [buy_1question_button, promocode_course_button, another_banking_course_button]

        for button in buttons:
            markup.add(button)

        course_description = """
        <b>üìò –ö—É—Ä—Å –æ –Ω–∞–±–æ—Ä–µ –∏ —Å—É—à–∫–µ –≤–µ—Å—Å–∞</b>
        <i>–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Å–≤–æ–µ–π –∏–¥–µ–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã –∏ —É–ª—É—á—à–∏—Ç–µ —Å–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ —Å –Ω–∞—à–∏–º –∫—É—Ä—Å–æ–º!</i>

        <u>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –≤ —ç—Ç–æ–º –∫—É—Ä—Å–µ:</u>
        - <strong>–ü–ª–∞–Ω –¥–Ω—è:</strong> –£–∑–Ω–∞–π—Ç–µ, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –¥–µ–Ω—å –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
        - <strong>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</strong> –ü–æ–ª—É—á–∏—Ç–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç –æ–ø—ã—Ç–Ω—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤.
        - <strong>–ü–∏—Ç–∞–Ω–∏–µ:</strong> –ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –≤–∞–º —Ä–µ—Ü–µ–ø—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–¥–æ—Ä–æ–≤–æ–º—É –ø–∏—Ç–∞–Ω–∏—é.

        <u>–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞:</u>
        - 200 –≥—Ä–∏–≤–µ–Ω (UAH)
        - 500 —Ä—É–±–ª–µ–π (RUB)

        –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –Ω–∞–º —Å–µ–≥–æ–¥–Ω—è –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –∫ –∑–¥–æ—Ä–æ–≤–æ–π –∏ –∫—Ä–∞—Å–∏–≤–æ–π –∂–∏–∑–Ω–∏! üí™ü•ó
        """
        bot.send_message(message.chat.id, text=course_description, parse_mode="HTML", reply_markup=markup)



@bot.callback_query_handler(func=lambda call: call.data == 'buy_course')
def buy_course_callback(call):
    user_id = call.from_user.id
    
    markup = types.InlineKeyboardMarkup()
    payment_for_course_url = QIWI_PAYMENT_URL_COURSE.format(user_id=user_id)
    pay_1_quest_button = types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url=payment_for_course_url)
    check_course_payment_button = types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="check_payment_for_course")
    markup.add(pay_1_quest_button, check_course_payment_button)
    
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text="–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=markup)




@bot.callback_query_handler(func=lambda call: call.data == 'check_payment_for_course')
def check_payment_for_course(call):
    user_id = call.from_user.id
    try:
        conn = sqlite3.connect(PAYMENTS_DB_PATH, check_same_thread=False)
        cursor = conn.cursor()

        # Check for comments that contain one of the specified variants
        comment_template = f'%–û–ø–ª–∞—Ç–∞ –∑–∞ –∫—É—Ä—Å {user_id}%'  # Original variant
        comment_template2 = f'%–û–ø–ª–∞—Ç–∞_–∑–∞_–∫—É—Ä—Å_{user_id}%'
        comment_template3 = f'–û–ø–ª–∞—Ç–∞%20–∑–∞%20–∫—É—Ä—Å%{user_id}%'  

        cursor.execute(
            f"SELECT * FROM payments WHERE amount = 500 AND currency = 643 AND status = 'SUCCESS' AND "
            f"(comment LIKE ? OR comment LIKE ? OR comment LIKE ?)",
            (comment_template, comment_template2, comment_template3)
        )
        payment_data_list = cursor.fetchall()

        for payment_data in payment_data_list:
            txn_id, amount, currency, date, comment, status, used = payment_data
            if not used:
                cursor.execute("UPDATE payments SET used = 1 WHERE txn_id = ?", (txn_id,))
                conn.commit()

                bot_db.set_course_access(user_id)
                bot.send_message(call.message.chat.id, "‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É.", reply_markup=course_keyboard)
            else:
                bot.send_message(call.message.chat.id, "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.")

        if not payment_data_list:
            bot.send_message(call.message.chat.id, "‚ùå –°–æ–≤–ø–∞–¥–∞—é—â–∞—è –æ–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã: {e}")

    finally:
        conn.close()

def process_and_use_promocode_for_course(message):
    user_id = message.from_user.id
    if not bot_db.user_has_course_access(user_id):
        promo_code = message.text.strip()
        if promo_code in promo_codes_course:
            del promo_codes_course[promo_code]
            save_promo_codes_to_file(promo_codes_course, file_course)
            bot_db.set_course_access(user_id)
            bot.send_message(user_id, "‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É.", reply_markup=course_keyboard)
        else:
            bot.send_message(user_id, "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
    else:
        bot.send_message(user_id, "‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É.", reply_markup=course_keyboard)
        
@bot.callback_query_handler(func=lambda call: call.data == 'another_banking_for_course')
def another_banking_for_course(call):
    user_id = call.from_user.id

    admin_username = bot.get_chat(ANOTHER_BANKING_ID).username
    message_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥—Ä—É–≥–æ–π –±–∞–Ω–∫–∏–Ω–≥." \
                   f"–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @fitstarsupport."

    bot.send_message(user_id, message_text)

@bot.callback_query_handler(func=lambda call: call.data == 'use_promocode_for_course')
def use_promocode_for_course(call):
    user_id = call.from_user.id
    bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
    bot.register_next_step_handler(call.message, process_and_use_promocode_for_course)
    
@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚Ü©Ô∏è')
def back_to_menu(message):
    bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è üõå')
def recovery_course(message):
    keyboard = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞ –Ω–∞ –∫—É—Ä—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", url="https://t.me/c/2143977979/12")
    keyboard.add(url_button)
    
    bot.send_message(message.chat.id, text=f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —á–∞—Å—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É –ø–æ —Å—Å—ã–ª–∫–µ: {channel_invite_link}", parse_mode='HTML', reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üèãÔ∏è‚Äç‚ôÇÔ∏è')
def workouts_course(message):
    keyboard = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞ –Ω–∞ –∫—É—Ä—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", url="https://t.me/c/2143977979/22")
    keyboard.add(url_button)
    bot.send_message(message.chat.id, text=f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —á–∞—Å—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É –ø–æ —Å—Å—ã–ª–∫–µ: {channel_invite_link}", parse_mode='HTML', reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == '–ü–∏—Ç–∞–Ω–∏–µ –Ω–∞ —Å—É—à–∫—É ü•ó')
def cutting_diet_course(message):
    keyboard = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞ –Ω–∞ –∫—É—Ä—Å –ø–∏—Ç–∞–Ω–∏–µ –Ω–∞ —Å—É—à–∫—É", url="https://t.me/c/2143977979/54")
    keyboard.add(url_button)
    bot.send_message(message.chat.id, text=f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —á–∞—Å—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É –ø–æ —Å—Å—ã–ª–∫–µ: {channel_invite_link}", parse_mode='HTML', reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == '–ü–∏—Ç–∞–Ω–∏–µ –Ω–∞ –º–∞—Å—Å—É üçó')
def bulking_diet_course(message):
    keyboard = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞ –Ω–∞ –∫—É—Ä—Å –ø–∏—Ç–∞–Ω–∏–µ –Ω–∞ –º–∞—Å—Å—É", url="https://t.me/c/2143977979/88")
    keyboard.add(url_button)
    bot.send_message(message.chat.id, text=f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —á–∞—Å—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É –ø–æ —Å—Å—ã–ª–∫–µ: {channel_invite_link}", parse_mode='HTML', reply_markup=keyboard)


###       
@bot.message_handler(func=lambda message: message.text == 'üî¢ –ë–ñ–£')
def countbju_handler(message):
    user_id = message.from_user.id

    if bot_db.user_has_course_access(user_id):
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=countbju_keyboard)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É. –ö—É–ø–∏—Ç–µ –∫—É—Ä—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É –ë–ñ–£.", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data in ["perMass", "perDrying"])
def handle_bju_callback(call):
    if call.data == "perMass":
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å:")
        user_states[call.message.chat.id] = 'waiting_for_weight_mass'
    elif call.data == "perDrying":
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å:")
        user_states[call.message.chat.id] = 'waiting_for_weight_drying'

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'waiting_for_weight_mass')
def handle_weight_input_mass(message: Message):
    process_bju_input(message, protein_multiplier=2, fat_multiplier=1, carb_multiplier=6, calorie_multiplier=42.1)

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'waiting_for_weight_drying')
def handle_weight_input_drying(message: Message):
    process_bju_input(message, protein_multiplier=2, fat_multiplier=1, carb_multiplier=4, calorie_multiplier=33.9)

def process_bju_input(message: Message, protein_multiplier, fat_multiplier, carb_multiplier, calorie_multiplier):
    try:
        weight = float(message.text)
        if not (25 <= weight <= 160):
            raise ValueError("Weight should be between 25 and 160 kg.")

        proteins = round(weight * protein_multiplier, 2)
        fats = round(weight * fat_multiplier, 2)
        carbohydrates = round(weight * carb_multiplier, 2)
        calories = round(weight * calorie_multiplier, 2)

        category = user_states.get(message.chat.id)

        if category == 'waiting_for_weight_drying':
            carb_label = "<i>–£–≥–ª–µ–≤–æ–¥—ã:</i>"
        elif category == 'waiting_for_weight_mass':
            carb_label = "<i>–£–≥–ª–µ–≤–æ–¥—ã: –æ—Ç</i>"
        else:
            carb_label = "<i>–£–≥–ª–µ–≤–æ–¥—ã:</i>"

        result_message = f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –≤–µ—Å–∞ {weight} –∫–≥:</b>\n\n" \
                         f"<i>–ë–µ–ª–∫–∏:</i> {proteins} –≥\n" \
                         f"<i>–ñ–∏—Ä—ã:</i> {fats} –≥\n" \
                         f"{carb_label} {carbohydrates} –≥ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)\n" \
                         f"<i>–ö–∫–∞–ª:</i> {calories}"

        bot.send_message(message.chat.id, result_message, parse_mode="HTML")

        user_states[message.chat.id] = None
    except ValueError as e:
        bot.send_message(message.chat.id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ)")


###
@bot.message_handler(func=lambda message: message.text == 'üåü –ó–∞–¥–∞—Ç—å –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å')
def question_handler(message):
    user_id = message.from_user.id
    markup = types.InlineKeyboardMarkup()
    
    buy_1question_button = types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å –≤–æ–ø—Ä–æ—Å (QIWI –ö–æ—à–µ–ª–µ–∫)", callback_data='buy_1_question')
    promocode_1quest_button = types.InlineKeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data='use_promocode_for_1quest')
    another_banking_1quest_button = types.InlineKeyboardButton("–î—Ä—É–≥–æ–π –±–∞–Ω–∫–∏–Ω–≥", callback_data='another_banking_for_1quest')

    buttons = [buy_1question_button, promocode_1quest_button, another_banking_1quest_button]

    for button in buttons:
        markup.add(button)

    question_description = """
    <i>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤.</i>
    <u>–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞:</u>
    - 20 –≥—Ä–∏–≤–µ–Ω (UAH)
    - 50 —Ä—É–±–ª–µ–π (RUB)
    """

    bot.send_message(message.chat.id, text=question_description, parse_mode="HTML", reply_markup=markup)
    
@bot.callback_query_handler(func=lambda call: call.data == 'buy_1_question')
def buy_1question_callback(call):
    user_id = call.from_user.id
    
    markup = types.InlineKeyboardMarkup()
    payment_for_1quest_url = QIWI_PAYMENT_URL_1QUEST.format(user_id=user_id)
    pay_1_quest_button = types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url=payment_for_1quest_url)
    check_1_payment_button = types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="check_payment_for_1quest")
    markup.add(pay_1_quest_button, check_1_payment_button)
    
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text="–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'check_payment_for_1quest')
def check_payment_for_1quest(call):
    user_id = call.from_user.id
    try:
        conn = sqlite3.connect(PAYMENTS_DB_PATH, check_same_thread=False)
        cursor = conn.cursor()
        
        comment_1quest1 = f'%–û–ø–ª–∞—Ç–∞ –∑–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å {user_id}%'  # Original variant
        comment_1quest2 = f'%–û–ø–ª–∞—Ç–∞_–∑–∞_–æ–¥–∏–Ω_–≤–æ–ø—Ä–æ—Å{user_id}%'
        comment_1quest3 = f'–û–ø–ª–∞—Ç–∞%20–∑–∞%20–æ–¥–∏–Ω%20–≤–æ–ø—Ä–æ—Å%{user_id}%' 

        cursor.execute(
            f"SELECT * FROM payments WHERE amount = 50 AND currency = 643 AND status = 'SUCCESS' AND"
            f"(comment LIKE ? OR comment LIKE ? OR comment LIKE ?)",
            (comment_1quest1, comment_1quest2, comment_1quest3)
        )
        payment_data_list = cursor.fetchall()
        
        for payment_data in payment_data_list:
            txn_id, amount, currency, date, comment, status, used = payment_data
            if not used:
                cursor.execute("UPDATE payments SET used = 1 WHERE txn_id = ?", (txn_id,))
                conn.commit()

                bot.send_message(call.message.chat.id, "‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞.")
                ask_for_question(call.message)

            else:
                bot.send_message(call.message.chat.id, "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.")

        if not payment_data_list:
            bot.send_message(call.message.chat.id, "‚ùå –°–æ–≤–ø–∞–¥–∞—é—â–∞—è –æ–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã: {e}")

    finally:
        conn.close()

def process_and_use_promocode_for_1quest(message):
    user_id = message.from_user.id
    promo_code = message.text.strip()

    if promo_code in promo_codes_one_question:
        del promo_codes_one_question[promo_code]
        save_promo_codes_to_file(promo_codes_one_question, file_one_question)

        bot.send_message(user_id, "‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
        ask_for_question(message)
    else:
        bot.send_message(user_id, "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
        
@bot.callback_query_handler(func=lambda call: call.data == 'another_banking_for_1quest')
def another_banking_for_1quest(call):
    user_id = call.from_user.id

    admin_username = bot.get_chat(ANOTHER_BANKING_ID).username
    message_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥—Ä—É–≥–æ–π –±–∞–Ω–∫–∏–Ω–≥." \
                   f"–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @fitstarsupport."
    
    # You may want to add additional logic or messages here as needed
    bot.send_message(user_id, message_text)

@bot.callback_query_handler(func=lambda call: call.data == 'use_promocode_for_1quest')
def use_promocode_for_1question(call):
    user_id = call.from_user.id
    bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
    bot.register_next_step_handler(call.message, process_and_use_promocode_for_1quest)


def ask_for_question(message):
    markup = types.InlineKeyboardMarkup()
    ask_button = types.InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data='ask_question')
    markup.add(ask_button)

    message = bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'ask_question')
def get_question_text(call):
    bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
    bot.register_next_step_handler(call.message, save_question)
    bot.delete_message(call.message.chat.id, call.message.message_id)
    

def send_notification_to_admins(question_id, user_id, username, question_text, timestamp):
    for admin_id in ADMIN_IDS:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f'reply_{question_id}'))

        user_info = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} (@{username})\n"
        bot.send_message(admin_id, f"{user_info}–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å ({timestamp}):\n{question_text}", reply_markup=markup)

def save_question(message):
    question_text = message.text
    user_id = message.from_user.id
    username = message.from_user.username

    # Check if the question_text is in the list of ignored phrases
    ignored_phrases = ['üìò –ö—É—Ä—Å –æ –Ω–∞–±–æ—Ä–µ –∏ —Å—É—à–∫–µ —Ç–µ–ª–∞', 'üåü –ó–∞–¥–∞—Ç—å –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å', 'üòé –ó–∞–¥–∞—Ç—å 10 –≤–æ–ø—Ä–æ—Å–æ–≤', 'üî¢ –ë–ñ–£', 'üôé‚Äç‚ôÇÔ∏è –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üèãüèΩ‚Äç‚ôÇÔ∏èC—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã']

    if any(ignored_phrase.lower() in question_text.lower() for ignored_phrase in ignored_phrases):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
        bot.register_next_step_handler(message, save_question)
    else:
        if not bot_db.user_exist(user_id):
            bot_db.add_user(user_id, username)

        questions_db = sqlite3.connect('db/questions.db')
        questions_cursor = questions_db.cursor()

        current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        questions_cursor.execute('INSERT INTO questions (user_id, username, question_text, timestamp) VALUES (?, ?, ?, ?)',
                                (user_id, username, question_text, current_time))
        questions_db.commit()

        question_id = questions_cursor.lastrowid

        questions_cursor.close()
        questions_db.close()

        bot.send_message(message.chat.id, "–ù–∞—à–∏ –∞–¥–º–∏–Ω—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º.")

        send_notification_to_admins(question_id, user_id, username, question_text, current_time)
        
   
### 
@bot.message_handler(func=lambda message: message.text == 'üòé –ó–∞–¥–∞—Ç—å 10 –≤–æ–ø—Ä–æ—Å–æ–≤')
def question_handler(message):   
    user_id = message.from_user.id
    markup = types.InlineKeyboardMarkup()
    
    buy_10questions_button = types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã (QIWI –ö–æ—à–µ–ª–µ–∫)", callback_data='buy_10_questions')
    promocode_10quests_button = types.InlineKeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data='use_promocode_for_10quests')
    another_banking_10quests_button = types.InlineKeyboardButton("–î—Ä—É–≥–æ–π –±–∞–Ω–∫–∏–Ω–≥", callback_data='another_banking_for_10quests')
    
    
    buttons = [buy_10questions_button, promocode_10quests_button, another_banking_10quests_button]
    
    for button in buttons:
        markup.add(button)
    
    questions10_description = """

    <i>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤.</i>

    <u>–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤:</u>
    - 150 –≥—Ä–∏–≤–µ–Ω (UAH)
    - 380 —Ä—É–±–ª–µ–π (RUB)
    """

    bot.send_message(message.chat.id, text=questions10_description, parse_mode="HTML", reply_markup=markup)
   
@bot.callback_query_handler(func=lambda call: call.data == 'buy_10_questions')
def buy_10_questions_callback(call):
    user_id = call.from_user.id
    
    markup = types.InlineKeyboardMarkup()
    payment_for_10quests_url = QIWI_PAYMENT_URL_10QUESTS.format(user_id=user_id)
    pay_10_quests_button = types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url=payment_for_10quests_url)
    check_10_payment_button = types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="check_payment_for_10_quests")
    markup.add(pay_10_quests_button, check_10_payment_button)
    
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text="–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=markup) 
    
@bot.callback_query_handler(func=lambda call: call.data == 'check_payment_for_10_quests')
def check_payment_for_10quests(call):
    user_id = call.from_user.id
    try:
        conn = sqlite3.connect(PAYMENTS_DB_PATH, check_same_thread=False)
        cursor = conn.cursor()

        cursor.execute(f"SELECT * FROM payments WHERE amount = 280 AND currency = 643 AND status = 'SUCCESS' AND comment = '–û–ø–ª–∞—Ç–∞_–∑–∞_10_–≤–æ–ø—Ä–æ—Å–æ–≤_{user_id}'")
        payment_data = cursor.fetchone()

        if payment_data:
            txn_id, amount, currency, date, comment, status, used = payment_data
            if not used:
                cursor.execute("UPDATE payments SET used = 1 WHERE txn_id = ?", (txn_id,))
                conn.commit()

                bot.send_message(call.message.chat.id, "‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞.")
                ask_for_questions(call.message)

            else:
                bot.send_message(call.message.chat.id, "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.")

        else:
            bot.send_message(call.message.chat.id, "‚ùå –°–æ–≤–ø–∞–¥–∞—é—â–∞—è –æ–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    except Exception as e:
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã: {e}")

    finally:
        conn.close()

    
@bot.callback_query_handler(func=lambda call: call.data == 'another_banking_for_10quests')
def another_banking_for_10quests(call):
    user_id = call.from_user.id

    admin_username = bot.get_chat(ANOTHER_BANKING_ID).username
    message_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥—Ä—É–≥–æ–π –±–∞–Ω–∫–∏–Ω–≥." \
                   f"–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @fitstarsupport."
    
    # You may want to add additional logic or messages here as needed
    bot.send_message(user_id, message_text)
  
def process_and_use_promocode_for_10quests(message):
    user_id = message.from_user.id
    promo_code = message.text.strip() 

    if promo_code in promo_codes_10_questions:
        del promo_codes_10_questions[promo_code]
        save_promo_codes_to_file(promo_codes_10_questions, file_10_questions)

        bot.send_message(user_id, "‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")
        ask_for_questions(message)
    else:
        bot.send_message(user_id, "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")   
    

@bot.callback_query_handler(func=lambda call: call.data == 'use_promocode_for_10quests')
def use_promocode_for_10questions(call):
    user_id = call.from_user.id
    bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
    bot.register_next_step_handler(call.message, process_and_use_promocode_for_10quests)

def ask_for_questions(message):
    markup = types.InlineKeyboardMarkup()
    ask10_button = types.InlineKeyboardButton("–ó–∞–¥–∞—Ç—å 10 –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data='ask_10_question')
    markup.add(ask10_button)
    bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã:(‚ùó–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –≤—Å–µ –≤–∞—à–∏ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏‚ùó)", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'ask_10_question')
def get_questions_text(call):
    bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã:")
    bot.register_next_step_handler(call.message, save_questions)
    bot.delete_message(call.message.chat.id, call.message.message_id)
      
def send_notification_to_admins(questions_id, user_id, username, question_text, timestamp):
    for admin_id in ADMIN_IDS:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f'reply_{questions_id}'))

        user_info = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} (@{username})\n"
        bot.send_message(admin_id, f"{user_info}–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å ({timestamp}):\n{question_text}", reply_markup=markup)
               
def save_questions(message):
    question_text = message.text
    user_id = message.from_user.id
    username = message.from_user.username
    
    ignored_10phrases = ['üìò –ö—É—Ä—Å –æ –Ω–∞–±–æ—Ä–µ –∏ —Å—É—à–∫–µ —Ç–µ–ª–∞', 'üåü –ó–∞–¥–∞—Ç—å –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å', 'üòé –ó–∞–¥–∞—Ç—å 10 –≤–æ–ø—Ä–æ—Å–æ–≤', 'üî¢ –ë–ñ–£', 'üôé‚Äç‚ôÇÔ∏è –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üèãüèΩ‚Äç‚ôÇÔ∏èC—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã']

    if any(ignored_phrase.lower() in question_text.lower() for ignored_phrase in ignored_10phrases):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã:")
        bot.register_next_step_handler(message, save_questions)
    else:
        if not bot_db.user_exist(user_id):
            bot_db.add_user(user_id, username)

        questions_db = sqlite3.connect('db/questions.db')
        questions_cursor = questions_db.cursor()

        current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        questions_cursor.execute('INSERT INTO questions (user_id, username, question_text, timestamp, question_count) VALUES (?, ?, ?, ?, ?)',
                                (user_id, username, question_text, current_time, 10)) 
        questions_db.commit()
        
        questions_id = questions_cursor.lastrowid 

        questions_cursor.close()
        questions_db.close()

        bot.send_message(message.chat.id, "–ù–∞—à–∏ –∞–¥–º–∏–Ω—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º")
        
        send_notification_to_admins(questions_id, user_id, username, question_text, current_time)
        

@bot.message_handler(func=lambda message: message.text == 'üèãüèΩ‚Äç‚ôÇÔ∏èC—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã')
def training_handler(message):
    user_id = message.from_user.id
    if bot_db.user_has_course_access(user_id):
        bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è?", reply_markup=training_keyboard)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É. –ö—É–ø–∏—Ç–µ –∫—É—Ä—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º.", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data in ["twice_per_week", "thrice_per_week", "fourth_per_week"])
def callback_handler(call):
    if call.data == "twice_per_week":
        with open(r'training_info\2_times_a_week.txt', 'r', encoding='utf-8') as file:
            content = file.read()
        bot.send_message(call.message.chat.id, content, parse_mode='HTML')
    elif call.data == "thrice_per_week":
        with open(r'training_info\3_times_a_week.txt', 'r', encoding='utf-8') as file:
            content = file.read()
        bot.send_message(call.message.chat.id, content, parse_mode='HTML')  
    elif call.data == "fourth_per_week":
        with open(r'training_info\4_times_a_week.txt', 'r', encoding='utf-8') as file:
            content = file.read()
        bot.send_message(call.message.chat.id, content, parse_mode='HTML')


#admin
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id in ADMIN_IDS:
        bot.send_message(message.chat.id, "üë®üèº‚Äçüíª–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=admin_keyboard)
 
 
###       
@bot.message_handler(func=lambda message: message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' and message.from_user.id in ADMIN_IDS)
def send_statistics_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_users = types.KeyboardButton("üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    item_admins = types.KeyboardButton("üõ°Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    item_back = types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥")
    markup.row(item_users, item_admins)
    markup.row(item_back)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=markup)


###
@bot.message_handler(func=lambda message: message.text == 'üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' and message.from_user.id in ADMIN_IDS)
def send_user_statistics(message):
    try:
        total_users = bot_db.cursor.execute("SELECT COUNT(*) FROM users").fetchone()[0]
        users_with_course_access = bot_db.cursor.execute("SELECT COUNT(*) FROM users WHERE has_course_access = 1").fetchone()[0]
        total_questions_count = get_total_questions_count()
        text = "üë• *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:* {0}\n".format(total_users)
        text += "üîí *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∫—É—Ä—Å—É:* {0}\n".format(users_with_course_access)
        text += f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions_count}"

        bot.send_message(message.chat.id, text, parse_mode='Markdown')

    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        
def get_total_questions_count():
    if not hasattr(thread_locals, 'questions_cursor'):
        thread_locals.questions_cursor = questions_db.cursor()

    thread_locals.questions_cursor.execute('''
        SELECT SUM(question_count) FROM questions
    ''')
    total_questions_count = thread_locals.questions_cursor.fetchone()[0]
    return total_questions_count
   
   
###     
@bot.message_handler(func=lambda message: message.text == 'üõ°Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' and message.from_user.id in ADMIN_IDS)
def send_admin_statistics(message):
    admin_statistics = get_admin_statistics()

    statistics_text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"
    for admin in admin_statistics:
        statistics_text += f"üë§ –ê–¥–º–∏–Ω @{admin['admin_username']} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ {admin['question_count']} –≤–æ–ø—Ä–æ—Å–æ–≤\n"

    bot.send_message(message.chat.id, statistics_text)

def get_admin_statistics():
    if not hasattr(thread_locals, 'questions_cursor'):
        thread_locals.questions_cursor = questions_db.cursor()
        
    thread_locals.questions_cursor.execute('''
        SELECT admin_username, SUM(question_count) AS question_count
        FROM questions
        WHERE admin_username IS NOT NULL
        GROUP BY admin_username
    ''')

    admin_statistics = thread_locals.questions_cursor.fetchall()

    admin_statistics_list = [{'admin_username': admin[0], 'question_count': admin[1]} for admin in admin_statistics]

    return admin_statistics_list

questions_db.commit()


###
@bot.message_handler(func=lambda message: message.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥' and message.from_user.id in ADMIN_IDS)
def go_back_to_main_menu(message):
    markup = types.ReplyKeyboardRemove(selective=False)
    bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å.", reply_markup=admin_keyboard)
        

###            
@bot.message_handler(func=lambda message: message.text == 'üì© –†–∞—Å—Å—ã–ª–∫–∞' and message.from_user.id in ADMIN_IDS)
def send_broadcast_prompt(message):

    bot.send_message(message.chat.id, '–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É *HTML*, —Ç–æ –µ—Å—Ç—å:\n'
                                      '<b>*–ñ–∏—Ä–Ω—ã–π*</b>\n'
                                      '<i>_–ö—É—Ä—Å–∏–≤_</i>\n'
                                      '<pre>`–ú–æ–Ω–æ—à–∏—Ä–Ω—ã–π`</pre>\n'
                                      '<a href="—Å—Å—ã–ª–∫–∞-–Ω–∞-—Å–∞–π—Ç">[–û–±–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç –≤ —Å—Å—ã–ª–∫—É](test.ru)</a>'.format(),
                             parse_mode="markdown")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:")
    bot.register_next_step_handler(message, process_broadcast_text)
def process_broadcast_text(message):
    bot.process_broadcast_text = message.text
    
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:")
    bot.register_next_step_handler(message, process_broadcast_photo)

def process_broadcast_photo(message):
    if message.text == '/skip':
        send_preview(message.chat.id)
    elif message.photo:
        bot.process_broadcast_photo = message.photo[0].file_id
        send_preview(message.chat.id)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")

def send_preview(chat_id):
    markup = types.InlineKeyboardMarkup()
    preview_button = types.InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_broadcast")
    cancel_button = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")
    markup.row(preview_button, cancel_button)
    markup.one_time_keyboard = True
    
    text = "üì£ *–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:*\n\n"
    text += bot.process_broadcast_text 
    
    if hasattr(bot, "process_broadcast_photo"):
        bot.send_photo(chat_id, bot.process_broadcast_photo, caption=text, parse_mode="Markdown", reply_markup=markup)
    else:
        bot.send_message(chat_id, text, parse_mode="Markdown", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "send_broadcast")
def send_broadcast_to_users_callback(call):
    text = bot.process_broadcast_text
    photo = bot.process_broadcast_photo if hasattr(bot, "process_broadcast_photo") else None
    send_broadcast_to_users(text, photo, call.message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data == "cancel_broadcast")
def cancel_broadcast_callback(call):
    bot.send_message(call.message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    del bot.process_broadcast_text
    if hasattr(bot, "process_broadcast_photo"):
        del bot.process_broadcast_photo
    admin_panel(call.message) 

def send_broadcast_to_users(text, photo, chat_id):
    try:
        user_ids = bot_db.get_all_user_ids() 
        for user_id in user_ids:
            try:
                if photo:
                    bot.send_photo(user_id, photo, caption=text, parse_mode='HTML')
                else:
                    bot.send_message(user_id, text, parse_mode='HTML')
            except Exception as e:
                print(f"Error sending message to user with ID {user_id}: {str(e)}")
        
        bot.send_message(chat_id, f"–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        
replied_questions = set()


###
@bot.message_handler(func=lambda message: message.text == 'üóÇ –í–∏–≥—Ä—É–∑–∏—Ç–∏ –ë–î' and message.from_user.id in ADMIN_IDS)
def get_DB(message):
    db_users = BotDb(BOT_DB_PATH)
    db_questions = QuestionsDb(QUESTIONS_DB_PATH)

    doc_users = db_users.get_DB()
    doc_questions = db_questions.get_questions_DB()
    bot.send_message(message.chat.id, "–ü—Ä–æ—Ü–µ—Å –≤–∏–≥—Ä—É–∑–∫–∏ ...")
    bot.send_document(message.chat.id, doc_users, caption=f"–ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–∏–ª–µ–π")
    bot.send_document(message.chat.id, doc_questions, caption=f"–ë–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤")

    db_users.close()
    db_questions.close()


###
@bot.message_handler(func=lambda message: message.text == '–í–æ–ø—Ä–æ—Å—ã')
def show_questions(message):
    questions_db = sqlite3.connect('db/questions.db')
    questions_cursor = questions_db.cursor()

    questions_cursor.execute('SELECT id, user_id, username, question_text, timestamp FROM questions WHERE answers_text IS NULL')
    questions = questions_cursor.fetchall()

    if not questions:
        bot.send_message(message.chat.id, "–ù–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    for question in questions:
        question_id, user_id, username, question_text, timestamp = question
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f'reply_{question_id}'))

        user_info = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} (@{username})\n"
        time_info = f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {timestamp}\n"
        bot.send_message(message.chat.id, f"{user_info}{time_info}–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{question_text}", reply_markup=markup)

    questions_db.close()


###
@bot.message_handler(func=lambda message: message.text == '–ê—Ä—Ö–∏–≤ –≤–æ–ø—Ä–æ—Å–æ–≤')
def show_archived_questions(message):
    questions_db = sqlite3.connect('db/questions.db')
    questions_cursor = questions_db.cursor()

    questions_cursor.execute('SELECT id, user_id, username, question_text, timestamp, answers_text FROM questions WHERE answers_text IS NOT NULL')
    questions = questions_cursor.fetchall()

    if not questions:
        bot.send_message(message.chat.id, "–ê—Ä—Ö–∏–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç.")
        return

    for question in questions:
        question_id, user_id, username, question_text, timestamp, answer_text = question

        user_info = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} (@{username})\n"
        time_info = f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {timestamp}\n"
        bot.send_message(message.chat.id, f"{user_info}{time_info}–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{question_text}\n–û—Ç–≤–µ—Ç:\n{answer_text}")

    questions_db.close()

@bot.callback_query_handler(func=lambda call: call.data.startswith('reply_'))
def reply_to_question(call):
    question_id = int(call.data.split('_')[1])

    if question_id in replied_questions:  
        bot.answer_callback_query(call.id, text="–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å", show_alert=True)
        return
    
    user_info = call.message.text.split('\n')[0]
    question_text = call.message.text[len(user_info):]

    bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n{question_text}")
    bot.register_next_step_handler(call.message, lambda message: send_reply(message, question_id))
    
    replied_questions.add(question_id)

def create_reply_button(question_id):
    text = "–û—Ç–≤–µ—Ç–∏—Ç—å" if question_id not in replied_questions else "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"
    button = InlineKeyboardButton(text, callback_data=f'reply_{question_id}')
    return button

def get_user_id_from_question(question_id):
    questions_db = sqlite3.connect('db/questions.db')
    questions_cursor = questions_db.cursor()

    questions_cursor.execute('SELECT user_id FROM questions WHERE id = ?', (question_id,))
    user_id = questions_cursor.fetchone()

    if user_id:
        return user_id[0]

    return None  

def send_reply(message, question_id):
    reply_text = message.text
    admin_username = message.from_user.username 

    # Check if the reply contains any ignored phrases
    ignored_phrases = ['üìò –ö—É—Ä—Å', 'üåü –ó–∞–¥–∞—Ç—å –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å', 'üòé –ó–∞–¥–∞—Ç—å 10 –≤–æ–ø—Ä–æ—Å–æ–≤', 'üî¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ë–ñ–£', 'üèãüèΩ‚Äç‚ôÇÔ∏èC—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã','üôé‚Äç‚ôÇÔ∏è –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üóÇ –í–∏–≥—Ä—É–∑–∏—Ç–∏ –ë–î', 'üì© –†–∞—Å—Å—ã–ª–∫–∞', '–í–æ–ø—Ä–æ—Å—ã', '–ó–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', '–ê—Ä—Ö–∏–≤ –≤–æ–ø—Ä–æ—Å–æ–≤', '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚Ü©Ô∏è', ]
    if any(phrase in reply_text for phrase in ignored_phrases):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:")
        bot.register_next_step_handler(message, lambda msg: send_reply(msg, question_id))
        return

    user_id = get_user_id_from_question(question_id)
    if user_id:
        bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç –∞–¥–º–∏–Ω–∞ @{admin_username}:\n{reply_text}")

    questions_db = sqlite3.connect('db/questions.db')
    questions_cursor = questions_db.cursor()
    questions_cursor.execute('UPDATE questions SET answers_text = ?, admin_username = ? WHERE id = ?', (reply_text, admin_username, question_id))
    questions_db.commit()
    questions_cursor.close()
    questions_db.close()

    bot.send_message(message.chat.id, "–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

  
###  

@bot.message_handler(func=lambda message: message.text == '–ó–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥' and message.from_user.id in ADMIN_IDS)
def generate_promo_code_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–ü—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞'))
    markup.add(types.KeyboardButton('–ü—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è 10 –≤–æ–ø—Ä–æ—Å–æ–≤'))
    markup.add(types.KeyboardButton('–ü—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∫—É—Ä—Å–∞'))
    markup.add(types.KeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥'))
    
    user_states[message.chat.id] = 'generate_promo_code'
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:", reply_markup=markup)
    
def generate_promo_code():
    characters = string.ascii_letters + string.digits
    return ''.join(random.choice(characters) for _ in range(6))

def save_promo_codes_to_file(promo_codes, filename):
    with open(filename, 'w', encoding='utf-8') as file:
        for promo_code, promo_code_type in promo_codes.items():
            file.write(f"{promo_code}\t{promo_code_type}\n")

promo_codes_one_question = {}
promo_codes_10_questions = {}
promo_codes_course = {}

file_one_question = "promocodes/promocodes.promo_codes_one_question.txt"
file_10_questions = "promocodes/promocodes.promo_codes_10_questions.txt"
file_course = "promocodes/promocodes.promo_codes_course.txt"


def load_promo_codes_from_file(filename, promo_codes):
    try:
        with open(filename, 'r', encoding='utf-8') as file: 
            for line in file:
                parts = line.strip().split('\t')
                if len(parts) == 2:
                    promo_code, promo_code_type = parts[0], parts[1]
                    promo_codes[promo_code] = promo_code_type
    except FileNotFoundError:
        pass
    
load_promo_codes_from_file(file_one_question, promo_codes_one_question)
load_promo_codes_from_file(file_10_questions, promo_codes_10_questions)
load_promo_codes_from_file(file_course, promo_codes_course)

def generate_promo_code_by_type(message, promo_code_type, promo_codes, file_name):
    promo_code = generate_promo_code()
    promo_codes[promo_code] = promo_code_type
    save_promo_codes_to_file(promo_codes, file_name)
    bot.send_message(message.chat.id, f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥: {promo_code}\n–¢–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞: {promo_code_type}", reply_markup=admin_keyboard)

@bot.message_handler(func=lambda message: message.text == '–ó–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥' and message.from_user.id in ADMIN_IDS)
def generate_promo_code_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    promo_code_types = ['–ü—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞', '–ü—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è 10 –≤–æ–ø—Ä–æ—Å–æ–≤', '–ü—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∫—É—Ä—Å–∞']
    for promo_code_type in promo_code_types:
        markup.add(types.KeyboardButton(promo_code_type))
    
    markup.add(types.KeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥'))
    
    user_states[message.chat.id] = 'generate_promo_code'
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:", reply_markup=markup)

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'generate_promo_code' and message.text != '‚óÄÔ∏è –ù–∞–∑–∞–¥')
def generate_specific_promo_code(message):
    promo_code_type = message.text
    
    if promo_code_type == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
        del user_states[message.chat.id]
        bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å.", reply_markup=admin_keyboard)
        return

    if promo_code_type == '–ü—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞':
        generate_promo_code_by_type(message, promo_code_type, promo_codes_one_question, file_one_question)
    elif promo_code_type == '–ü—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è 10 –≤–æ–ø—Ä–æ—Å–æ–≤':
        generate_promo_code_by_type(message, promo_code_type, promo_codes_10_questions, file_10_questions)
    elif promo_code_type == '–ü—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∫—É—Ä—Å–∞':
        generate_promo_code_by_type(message, promo_code_type, promo_codes_course, file_course)


if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print (e)
            
